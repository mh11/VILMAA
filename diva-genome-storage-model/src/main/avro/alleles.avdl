
@namespace("diva.genome.storage.models.alleles.avro")

protocol Alleles {
    import idl "variant.avdl";
    import idl "variantAnnotation.avdl";

    record AlleleCount {
        array<int> noCall;
        array<int> het;
        array<int> homVar;
        /**
         * Reference counts for samples, not covered by het or homVar
          * <ul>
          * <li>1 for one reference allele</li>
          * <li>2 NOT included: hom_ref values are not stored</li>
          * <li>other possible alleles</li>
          * </ul>
         */
        // @java-key-class("java.lang.Integer") // issue with parquet
        map<array<int>> referenceAlleleCounts;
        /**
         * Allele counts for current alternate, not covered by het or homVar
          * <ul>
          * <li>1 for one alternate allele</li>
          * <li>2 NOT included: hom_var values are stored separately</li>
          * <li>other possible alleles</li>
          * </ul>
         */
        // @java-key-class("java.lang.Integer") // issue with parquet
        map<array<int>> altAlleleCounts;
        /**
         * Allele  counts for other alternates (not current):
          * map of alternate string e.g. A_T with allele count and ID list.
          * <ul>
          * <li>1 for one alternate allele</li>
          * <li>2 NOT included: hom_var values are stored separately</li>
          * <li>other possible alleles</li>
          * </ul>
         */
        // @java-key-class("java.lang.Integer") // issue with parquet
        map<map<array<int>>> otherAltAlleleCounts;
    }

    record VariantStats {
        int refAlleleCount;
        int altAlleleCount;
        map<int> genotypesCount;
        float maf;
        float mgf;
        string mafAllele;
        int numSamples;
    }


    record VariantAnnotation {
        string id = "";
        array<org.opencb.biodata.models.variant.avro.Xref> xrefs = [];
        array<string> hgvs = [];
        string displayConsequenceType = "";
        array<org.opencb.biodata.models.variant.avro.ConsequenceType> consequenceTypes = [];
        array<org.opencb.biodata.models.variant.avro.PopulationFrequency> populationFrequencies = [];
        array<org.opencb.biodata.models.variant.avro.Score> conservation = [];
        array<org.opencb.biodata.models.variant.avro.Score> functionalScore = [];
    }

    record AllelesAvro {

        /**
         * Chromosome of the reported allele count.
         */
        string chromosome;

        /**
         * Start position of the allele count.
         */
        int start;

        /**
         * Start position of the allele count.
         */
        int end;

        /**
         * Reference allele.
         */
        string reference;

        /**
         * Alternate allele.
         */
        string alternate;

        /**
         * Length of the variation (e.g. 1 for SNV, length of alt for INS, length of ref for DEL)
         */
        int lengthVariant;

        /**
         * Length of the variation (e.g. 1 for SNV, 0 for INS, length of ref for DEL)
         */
        int lengthReference;

        int numberOfSamples;
        int pass;
        array<int> notPass;
        float callRate;
        float passRate;
        float overallPassRate;

        array<string> consequenceTypes;
        array<string> bioTypes;
        union { null, float } caddScaledMax = null;
        array<string> ensemblGeneIds;
        float mafWgs10k;

        /**
         * Allele count of the current ref/alt and other overlapping alternates.
         */
        AlleleCount alleleCount;

        /**
         * Variant type (as specific as possible)
         */
        org.opencb.biodata.models.variant.avro.VariantType type;

        /**
         * Statistics of the sample allele counts.
         */
        map<VariantStats> stats;

        /**
         * Annotations of the genomic variation.
         */
        VariantAnnotation annotation;

    }

}


